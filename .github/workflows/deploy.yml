name: Deploy

on:
  push:
    branches:
      - main
    tags:
      - release/*
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: repo-main

      - name: Find latest release tag (release/x.x.x)
        id: find_release_tag
        working-directory: repo-main
        shell: bash
        run: |
          git fetch --tags --force
          tag=$(git for-each-ref --format="%(refname:short)" --sort=-version:refname refs/tags/release/* | head -n1)
          if [ -z "$tag" ]; then
            echo "No tags matching release/* were found" >&2
            exit 1
          fi
          echo "release_tag=$tag" >> "$GITHUB_OUTPUT"

      - name: Checkout latest release tag
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.find_release_tag.outputs.release_tag }}
          path: repo-prod

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: yarn
          cache-dependency-path: |
            **/yarn.lock

      - name: Build prod
        working-directory: repo-prod
        run: |
          yarn install --frozen-lockfile
          yarn build-prod
          mkdir -p ../site/prod
          cp -R ./dist/* ../site/prod
          rm ../site/prod/manifest.test.json
          mv ../site/prod/manifest.prod.json ../site/prod/manifest.json

      - name: Build test
        working-directory: repo-main
        run: |
          yarn install --frozen-lockfile
          yarn build-test
          mkdir -p ../site/test
          cp -R ./dist/* ../site/test
          rm ../site/test/manifest.prod.json
          mv ../site/test/manifest.test.json ../site/test/manifest.json

      - name: Print combined artifact
        run: |
          ls -la
          echo "Contents of site/:"
          ls -la ./site

      - name: Configure GitHub Pages
        uses: actions/configure-pages@v5

      - name: Upload combined artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
